@page "/Asset/Asset-List"

@inject IAssetRepository IService
@inject IDialogService DialogService

<PageTitle>Asset List - DJATI Mining Management System</PageTitle>

<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="20" Width="100%" Wrap="true">
  <div>
    <FluentAnchor Href="/" IconStart="@(new Icons.Regular.Size16.ChevronLeft())">
      <FluentLabel Typo="Typography.H3">
        Back to Home
      </FluentLabel>
    </FluentAnchor>
  </div>
  <FluentSpacer />
  <div>
    <FluentButton Id="UploadFromCSV" IconEnd="@(new Icons.Regular.Size20.ArrowUpload())">
      Upload from CSV/Excel
    </FluentButton>
  </div>
  <div>
    <FluentButton Id="DownloadToCSV" Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size20.ArrowDown())">
      Download to CSV/Excel
    </FluentButton>
  </div>
</FluentStack>

<FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center" HorizontalGap="20" Width="100%" Wrap="true">
  <div class="space-y-2">
    <FluentLabel Typo="Typography.PageTitle" Weight="FontWeight.Bold" Color="Color.Accent">
      Assets List
    </FluentLabel>
    <FluentLabel Typo="Typography.Body" Weight="FontWeight.Normal">
      Grouping of Your Asset in here
    </FluentLabel>
  </div>
  <FluentSpacer />
  <div>
    @if (CheckBoxSelectedDefault is not null)
    {
      @foreach (string? val in CheckBoxSelectedDefault!)
      {
        bool isChecked = CheckBoxSelected!.Exists(x => x == val);
        <FluentCheckbox Label="@val" Value="@isChecked" ValueChanged="c => OnCheckBoxValueChanged(val, c)" />
      }
    }
  </div>
</FluentStack>

<FluentStack Width="100%" Wrap="true" Orientation="Orientation.Vertical" VerticalGap="16">
  <FluentStack Wrap="true" HorizontalAlignment="HorizontalAlignment.Start" Orientation="Orientation.Horizontal" HorizontalGap="16" VerticalAlignment="VerticalAlignment.Center">
    <FluentLabel Typo="Typography.Header" Weight="FontWeight.Bold">
      Table List
    </FluentLabel>
    <FluentSpacer />
    <span class="inline-flex items-center space-x-5">
      <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold" Color="Color.Accent">Select Asset Category</FluentLabel>
            <div>
                <FluentSelect Items="@categories" TOption="xpAsset_Category"
                              Appearance="Appearance.Filled"
                              Multiple=false
                              Id="Category_Selection"
                              OptionValue="@(p => p.Category)"
                              OptionText="@(p => p.Category)"
                              ValueChanged="@(e => OnCategoryChanged(e))" />
            </div>
    </span>
    <div>
        <FluentButton Style="width: 100% !important" OnClick="@(async (e) => await NewA_sset())" Appearance="Appearance.Accent">Add New Asset</FluentButton>
    </div>
    </FluentStack>
</FluentStack>

<FluentDataGrid RowClass="@rowClass" ResizableColumns="true" Items="@FilteredItems" Pagination="@pagination" GridTemplateColumns="15% 25% 15% 20% 7.5% ">
    <TemplateColumn  Title="id" Sortable="true" IsDefaultSortColumn="true">
        <FluentButton Style="width: 100%;" OnClick="@(async (e) => {asset = context; await OpenPanelAsync(context);})" Appearance="Appearance.Accent">@context.Id</FluentButton>
        </TemplateColumn>

        @if (CheckBoxSelected!.Exists(p => p == "Classification"))
    {
        <TemplateColumn Tooltip="true" TooltipText="@(c => "Classification of " + c.Name)" Title="Classification" SortBy="@ClassAndBrandSort" Align="Align.Start" InitialSortDirection="SortDirection.Ascending">
            <select @bind="@context.Classification" class="fluent-select">
                @foreach (xpAsset_Classification oh in classifications!)
                {
                    <option value="@oh.Classification">@oh.Classification</option>
                }
            </select>
        </TemplateColumn>
    }

    @if (CheckBoxSelected!.Exists(p => p == "Brand"))
    {
        <TemplateColumn Tooltip="true" TooltipText="@(c => "Brand of " + c.Name)" Title="Brand" SortBy="@BrandAndClassSort"
                        Align="Align.Start" InitialSortDirection="SortDirection.Ascending">
            <select @bind="@context.Brand" class="fluent-select">
                @foreach (xpAsset_Brand oh in brands!)
                {
                    <option value="@oh.Brand" class="option-checked">@oh.Brand</option>
                }
            </select>
        </TemplateColumn>
    }

    @if (CheckBoxSelected!.Exists(p => p == "Name"))
    {
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Tooltip="true" Title="Asset Title">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleEquipmentNameFilter" @bind-Value:after="HandleClear" Placeholder="Equipment Name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
    }

    @if (CheckBoxSelected!.Exists(p => p == "Production_Year"))
    {
        <PropertyColumn Property="@(c => c.Production_Year)" Title="Year" Sortable="true" Align="Align.End" />

    }

    @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Serial_Number")) *@
    @if (CheckBoxSelected!.Exists(p => p == "Serial_Number"))
    {
        <PropertyColumn Property="@(c => c.Serial_Number)" Title="Serial Number" Align="Align.Start" Tooltip="true" />
    }
    <TemplateColumn  Title="Actions" Align="@Align.End" Class="space-x-2">
        <FluentButton IconEnd="@(new Icons.Regular.Size16.Pen())" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
        <FluentButton OnClick="@(() => Console.WriteLine("Edit clicked"))">
            <FluentIcon Value="@(new Icons.Regular.Size20.Delete())" Color="Color.Error" />
        </FluentButton>
        <FluentButton IconEnd="@(new Icons.Regular.Size16.ArrowDownload())" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
    </TemplateColumn>
</FluentDataGrid>
<FluentPaginator State="@pagination" />


@code {

  #region Variables and List

  public string? _company_Id = "002";

  IQueryable<xpAsset>? assets { get; set; }
  public xpAsset? asset { get; set; } = new();

  public List<xpAsset_Category>? categories = new();
  public xpAsset_Category? category;
  public string? _category;

  public List<xpAsset_Classification>? classifications = new();
  public xpAsset_Classification? classification;
  public string? _classification;

  public List<xpAsset_Brand>? brands = new();
  public xpAsset_Brand? brand;
  public string? _brand;

  public List<xpAsset_Group>? groups = new();
  public xpAsset_Group? group;
  public string? _group;

  List<Option<string>>? DataGridDefaultColumns = new();
  IEnumerable<string>?    OptionSelectedDefault;
  IEnumerable<Option<string>>? SelectedOptionsBind;
  bool? OpenSelect = false;

  List<string>? CheckBoxSelectedDefault = new List<string> { "Classification", "Brand", "Name", "Production_Year", "Serial_Number" };
  List<string>? CheckBoxSelected = new List<string> { "Classification", "Brand", "Name", "Production_Year", "Serial_Number" };

  #endregion

}

@code {

  #region OonCategoryChanged

  protected override async Task OnInitializedAsync()
  {
    categories = await IService.AssetCategoryAsync(_company_Id!);
    groups = await IService.AssetGroupAsync(_company_Id!);

    DataGridDefaultColumns = new()
    {
      { new Option<string> { Value="Name",  Text="Name" } },
      { new Option<string> { Value="Brand",  Text="Brand" } },
      { new Option<string> { Value="Cl" +
                                   "assification",  Text="Classification" } },
      { new Option<string> { Value="Production_Year",  Text="Year" } },
      { new Option<string> { Value="Serial_Number",  Text="Serial Number" } },
    };

    OptionSelectedDefault = DataGridDefaultColumns.Select(p => p.Value)!;
  }

  public async Task OnCategoryChanged(string value)
  {
    if (!String.IsNullOrEmpty(value))
    {
      _category = value;
      assets = (await IService.AssetListAsync(_company_Id!, _category!)).AsQueryable();
      classifications = await IService.AssetClassificationAsync(_company_Id!, _category!);
      brands = await IService.AssetBrandAsync(_company_Id!, _category!);
    }
    else
    {
      _category = null;
      assets = null;
    }

    await Task.CompletedTask;
  }

  #endregion

}

@code {

  #region CheckBoxSelected

  protected void OnCheckBoxValueChanged(string value, bool isChecked)
  {
    Console.WriteLine($"isChecked: {isChecked}");
    Console.WriteLine($"CheckBoxSelected 1: {String.Join(",", CheckBoxSelected!)}");

    if (isChecked)
    {
      CheckBoxSelected!.Add(value);
    }
    else
    {
      CheckBoxSelected!.Remove(value);
    }

    Console.WriteLine($"CheckBoxSelected 2: {String.Join(",", CheckBoxSelected!)}");

  }

  #endregion

}

@code {

  #region Pagination and Grid Sort

  PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
  string nameFilter = string.Empty;

  GridSort<xpAsset> BrandAndClassSort = GridSort<xpAsset>
    .ByDescending(x => x.Brand)
    .ThenDescending(x => x.Classification);

  GridSort<xpAsset> ClassAndBrandSort = GridSort<xpAsset>
    .ByDescending(x => x.Classification)
    .ThenDescending(x => x.Brand);

  Func<xpAsset, string?> rowClass = x => x.Classification switch
  {
    "Excavator" => "highlighted-row-v1",
    "Dump Truck" => "highlighted-row-v2",
    "Articulated Dump Truck" => "highlighted-row-v3",
    _ => null
  };

  IQueryable<xpAsset>? FilteredItems => assets?.Where(x => x.Name!.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

  private void HandleEquipmentNameFilter(ChangeEventArgs args)
  {
    if (args.Value is string value)
    {
      nameFilter = value;
    }
  }

  private void HandleClear()
  {
    if (string.IsNullOrWhiteSpace(nameFilter))
    {
      nameFilter = string.Empty;
    }
  }

  #endregion

}

@code {

  #region Dilaog Services

  private IDialogReference? _dialog;

  private async Task OpenPanelAsync(xpAsset? _asset)
  {
    _dialog = await DialogService.ShowPanelAsync<AssetDetail>(_asset!, new DialogParameters<xpAsset>()
    {
      Content = _asset!,
      Alignment = HorizontalAlignment.Center,
      Modal = true,
      ShowDismiss = true,
      Title = $"{_asset!.Id} - {_asset!.Name}",
      PrimaryAction = "Save",
      SecondaryAction = "Cancel",
      Width = "90em",
      Height = "100em",
      DialogType = DialogType.SplashScreen,
      PreventScroll = true,
      DialogBodyStyle = "color: red;"
    });
    DialogResult result = await _dialog.Result;
    await HandlePanel(result);
  }

  private async Task HandlePanel(DialogResult result)
  {
    if (result.Cancelled)
    {
      Console.WriteLine($"Panel Cancelled");
    }
    else
    {
      if (result.Data is not null)
      {
        xpAsset? _asset = result.Data as xpAsset;
        Console.WriteLine($"Panel Closed by {_asset?.Id} {_asset?.Name}");
      }
    }

    await Task.Run(() => Console.WriteLine($"Panel Finish"));
  }

  #endregion

}

@code {

  private async Task NewA_sset()
  {
    asset = new();
    asset.Company_Id = _company_Id;
    asset.Category = _category;
    await OpenPanelAsync(asset);

    await Task.CompletedTask;
  }

}
