@page "/Asset/Asset-List"
@using EAM.Shared.StoredProcedures
@using EAM.Shared.Models
@using System.Reflection
@* @inject NavigationManager navigation; *@
@* @inject HttpClient httpClient *@
@inject IAssetRepository IService
@inject IDialogService DialogService

@* Turn this ON make OnInitializedAsync() calling twice *@
@* @rendermode InteractiveWebAssembly *@
@rendermode @(new InteractiveAutoRenderMode(prerender:false))

<style>
    .highlighted-row-v1 {
        background-color: lightyellow;
    }

    .highlighted-row-v2 {
        background-color: lightcyan;
    }

    .highlighted-row-v3 {
        background-color: lavender;
    }

    fluent-data-grid {
        max-width: 80em;
        font-style: normal;
        z-index: 1;
    }

    .fluent-data-grid {
        font-style: normal;
        z-index: 1;
    }

    fluent-data-grid-row {
        vertical-align: middle;
        align-content: center;
        align-items: center;
    }

    .fluent-data-grid-row {
        z-index: 0;
    }

    fluent-data-grid-row:not(:first-child):hover {
        background-color: #DFFF00;
    }

    fluent-data-grid-row:not(:nth-of-type(1)) > fluent-data-grid-cell:hover {
        background-color: lightcyan;
    }

    .fluent-select {
        width: 100%;
        height: 30px;
        line-height: 30px;
        appearance: menulist-button;
        z-index: 10;
        border: solid 2px gray;
        border-radius: 3px;
        color: inherit;
        background-color: inherit;
    }

    select:focus {
        outline: 2px solid red;
    }

    option {
        background-color: whitesmoke;
    }

        option:checked {
            color: white;
            background-color: black;
        }

        option:not(:checked) {
            background-color: whitesmoke;
        }

</style>

<PageTitle>Asset List</PageTitle>

<h3>Asset List</h3>

<FluentStack Orientation="Orientation.Horizontal">
    <div>
        @* <div>Select Asset Category...</div> *@
        <FluentSelect Items="@categories"
                      TOption="xpAsset_Category"
                      Multiple=false
                      Id="Category_Selection"
                      Label="Select Asset Category..."
                      OptionValue="@(p => p.Category)"
                      OptionText="@(p => p.Category)"
                      ValueChanged="@(e => OnCategoryChanged(e))" />

    </div>

    <div style="margin-left: auto; margin-right: auto;">
        @* <FluentSelect Items="@DataGridDefaultColumns"
        TOption="Option<string>"
        Multiple=true
        Label="Select Columns..."
        Id="Column_Selection"
        OptionValue="@(p => p.Value)"
        OptionText="@(p => p.Text)"
        OptionSelected="@(p => OptionSelectedDefault!.Contains(p.Value))"
        @bind-SelectedOptions="@SelectedOptionsBind" /> *@

        @if (CheckBoxSelectedDefault is not null)
        {
            @foreach (string? val in CheckBoxSelectedDefault!)
            {
                bool isChecked = CheckBoxSelected!.Exists(x => x == val);
                <FluentCheckbox Label="@val" Value="@isChecked"
                                ValueChanged="c => OnCheckBoxValueChanged(val, c)" />
            }
        }
    </div>

    <div>
        @if (!String.IsNullOrEmpty(_category))
        {
            <FluentButton OnClick="@(async (e) => await NewA_sset())"
                          Appearance="Appearance.Accent">Add New Asset</FluentButton>
        }
    </div>

</FluentStack>

@* @if (SelectedOptionsBind is not null) *@
@* { *@
    <FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination" Class="fluent-data-grid"
                    RowClass="@rowClass" GridTemplateColumns="15% 25% 15% 20% 7.5% ">

        <TemplateColumn Title="Id" Sortable="true" IsDefaultSortColumn="true">
            <FluentButton OnClick="@(async (e) => {asset = context; await OpenPanelAsync(context);})"
                          Appearance="Appearance.Accent">@context.Id</FluentButton>
        </TemplateColumn>

        @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Classification")) *@
        @if (CheckBoxSelected!.Exists(p => p == "Classification"))
        {
            <TemplateColumn Tooltip="true" TooltipText="@(c => "Classification of " + c.Name)" Title="Classification"
                SortBy="@ClassAndBrandSort" Align="Align.Start" InitialSortDirection="SortDirection.Ascending">
                <select @bind="@context.Classification" class="fluent-select">
                    @foreach (xpAsset_Classification oh in classifications!)
                    {
                        <option value="@oh.Classification">@oh.Classification</option>
                    }
                </select>
            </TemplateColumn>
        }

        @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Brand")) *@
        @if (CheckBoxSelected!.Exists(p => p == "Brand"))
        {
            <TemplateColumn Tooltip="true" TooltipText="@(c => "Brand of " + c.Name)" Title="Brand" SortBy="@BrandAndClassSort"
                            Align="Align.Start" InitialSortDirection="SortDirection.Ascending">
                <select @bind="@context.Brand" class="fluent-select">
                    @foreach (xpAsset_Brand oh in brands!)
                    {
                        <option value="@oh.Brand" class="option-checked">@oh.Brand</option>
                    }
                </select>
            </TemplateColumn>
        }

        @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Name")) *@
        @if (CheckBoxSelected!.Exists(p => p == "Name"))
        {
            <PropertyColumn Property="@(c => c.Name)" Sortable="true" Tooltip="true" Title="Asset Title">
                <ColumnOptions>
                    <div class="search-box">
                        <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleEquipmentNameFilter" @bind-Value:after="HandleClear" Placeholder="Equipment Name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }

        @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Production_Year")) *@
        @if (CheckBoxSelected!.Exists(p => p == "Production_Year"))
            {
                <PropertyColumn Property="@(c => c.Production_Year)" Title="Year" Sortable="true" Align="Align.End" />

            }

            @* @if (SelectedOptionsBind!.ToList().Exists(p => p.Value == "Serial_Number")) *@
        @if (CheckBoxSelected!.Exists(p => p == "Serial_Number"))
            {
                <PropertyColumn Property="@(c => c.Serial_Number)" Title="Serial Number" Align="Align.Start" Tooltip="true" />
            }
    </FluentDataGrid>

    <FluentPaginator State="@pagination" />

@* } *@

@code {

    private async Task NewA_sset()
    {
        asset = new();
        asset.Company_Id = _company_Id;
        asset.Category = _category;
        await OpenPanelAsync(asset);

        await Task.CompletedTask;
    }

}

@code {
    List<string>? CheckBoxSelectedDefault = new List<string> { "Classification", "Brand", "Name", "Production_Year", "Serial_Number" };
    List<string>? CheckBoxSelected = new List<string> { "Classification", "Brand", "Name", "Production_Year", "Serial_Number" };

    protected void OnCheckBoxValueChanged(string value, bool isChecked)
    {
        Console.WriteLine($"isChecked: {isChecked}");
        Console.WriteLine($"CheckBoxSelected 1: {String.Join(",", CheckBoxSelected!)}");

        if (isChecked)
        {
            CheckBoxSelected!.Add(value);
        }
        else
        {
            CheckBoxSelected!.Remove(value);
        }

        Console.WriteLine($"CheckBoxSelected 2: {String.Join(",", CheckBoxSelected!)}");

    }
}

@code {

    #region Variables
    public string? _company_Id = "002";
    IQueryable<xpAsset>? assets { get; set; }
    public xpAsset? asset { get; set; } = new();

    public List<xpAsset_Category>? categories = new();
    public xpAsset_Category? category;
    public string? _category;

    public List<xpAsset_Classification>? classifications = new();
    public xpAsset_Classification? classification;
    public string? _classification;

    public List<xpAsset_Brand>? brands = new();
    public xpAsset_Brand? brand;
    public string? _brand;

    public List<xpAsset_Group>? groups = new();
    public xpAsset_Group? group;
    public string? _group;
    #endregion

    @* apabila category dipilih maka db akan di get *@
    List<Option<string>>? DataGridDefaultColumns = new();
    IEnumerable<string>?    OptionSelectedDefault;
    IEnumerable<Option<string>>? SelectedOptionsBind;
    bool? OpenSelect = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await IService.AssetCategoryAsync(_company_Id!);
        groups = await IService.AssetGroupAsync(_company_Id!);

        DataGridDefaultColumns = new()
        {
            { new Option<string> { Value="Name",  Text="Name" } },
            { new Option<string> { Value="Brand",  Text="Brand" } },
            { new Option<string> { Value="Cl" +
                                         "assification",  Text="Classification" } },
            { new Option<string> { Value="Production_Year",  Text="Year" } },
            { new Option<string> { Value="Serial_Number",  Text="Serial Number" } },
        };

        OptionSelectedDefault = DataGridDefaultColumns.Select(p => p.Value)!;

        #region
        // foreach (PropertyInfo propName in typeof(xpAsset).GetProperties())
        // {
        //     DataGridDefaultColumns!.Add(propName.Name);
        // }
        // string ss = String.Join(",", DataGridDefaultColumns!);
        #endregion
    }

    @* Apabila select category dipilih maka token si company id dan category akan menyala *@
    public async Task OnCategoryChanged(string value)
    {
        if (!String.IsNullOrEmpty(value))
        {
            _category = value;
            assets = (await IService.AssetListAsync(_company_Id!, _category!)).AsQueryable();
            classifications = await IService.AssetClassificationAsync(_company_Id!, _category!);
            brands = await IService.AssetBrandAsync(_company_Id!, _category!);
        }
        else
        {
            _category = null;
            assets = null;
        }

        await Task.CompletedTask;
    }
}

@code {

    // IQueryable<xpAsset>? assets;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    string nameFilter = string.Empty;

    GridSort<xpAsset> BrandAndClassSort = GridSort<xpAsset>
        .ByDescending(x => x.Brand)
        .ThenDescending(x => x.Classification);

    GridSort<xpAsset> ClassAndBrandSort = GridSort<xpAsset>
        .ByDescending(x => x.Classification)
        .ThenDescending(x => x.Brand);

    Func<xpAsset, string?> rowClass = x => x.Classification switch
    {
        "Excavator" => "highlighted-row-v1",
        "Dump Truck" => "highlighted-row-v2",
        "Articulated Dump Truck" => "highlighted-row-v3",
        _ => null
    };
    // Func<xpAsset, string?> rowClass = x => x.Classification == "Excavator" ? "highlighted-row-v1" : null;
    // Func<xpAsset, string?> rowStyle = x => x.Classification == "Dump Truck" ? "background-color: lightcyan;" : null;
    // Func<xpAsset, string?> rowStyle = x => x.Classification == "Water Pump" ? "vertical-align: middle;" : null;

    IQueryable<xpAsset>? FilteredItems => assets?.Where(x => x.Name!.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    private void HandleEquipmentNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }
}

@code {

    private IDialogReference? _dialog;

    private async Task OpenPanelAsync(xpAsset? _asset)
    {
        _dialog = await DialogService.ShowPanelAsync<AssetDetail>(_asset!, new DialogParameters<xpAsset>()
            {
                Content = _asset!,
                Alignment = HorizontalAlignment.Center,
                Modal = true,
                ShowDismiss = true,
                Title = $"{_asset!.Id} - {_asset!.Name}",
                PrimaryAction = "Save",
                SecondaryAction = "Cancel",
                Width = "90em",
                Height = "100em",
                DialogType = DialogType.SplashScreen,
                PreventScroll = true,
                DialogBodyStyle = "color: red;"
            });
        DialogResult result = await _dialog.Result;
        await HandlePanel(result);
    }

    private async Task HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
            Console.WriteLine($"Panel Cancelled");
        }
        else
        {
            if (result.Data is not null)
            {
                xpAsset? _asset = result.Data as xpAsset;
                Console.WriteLine($"Panel Closed by {_asset?.Id} {_asset?.Name}");
            }
        }

        await Task.Run(() => Console.WriteLine($"Panel Finish"));
    }
}
