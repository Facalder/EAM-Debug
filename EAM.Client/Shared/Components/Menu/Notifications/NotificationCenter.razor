@implements IDisposable
@inject IDialogService DialogService
@inject IMessageService MessageService

<FluentButton Appearance="Appearance.Neutral" OnClick="OpenNotificationCenterAsync" Title="Notification center">
    @NotificationIcon()
</FluentButton>

@code {

    private IDialogReference? _dialog;

    protected override void OnInitialized()
    {
        MessageService.OnMessageItemsUpdated += UpdateCount;
    }

    private void UpdateCount()
    {
        InvokeAsync(StateHasChanged);
    }

    private RenderFragment NotificationIcon() => @<FluentIcon Value="@(new Icons.Regular.Size20.Alert())" Color="Color.Accent"  Title="Notification center" />;

    private async Task OpenNotificationCenterAsync()
    {
        Console.WriteLine($"Open notification center");

        _dialog = await DialogService.ShowPanelAsync<NotificationCenterPanel>(new DialogParameters<GlobalState>()
            {
                Alignment = HorizontalAlignment.Right,
                Title = $"Notifications",
                PrimaryAction = null,
                SecondaryAction = null,
                ShowDismiss = true
            });
        DialogResult result = await _dialog.Result;
        HandlePanel(result);
    }

    private static void HandlePanel(DialogResult result)
    {
        if (result.Cancelled)
        {
            Console.WriteLine($"Notification center dismissed");
            return;
        }

        if (result.Data is not null)
        {
            Console.WriteLine($"Notification center closed");
            return;
        }
    }

    public void Dispose()
    {
        MessageService.OnMessageItemsUpdated -= UpdateCount;
    }

}
